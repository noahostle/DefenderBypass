#include <windows.h>
#include <winhttp.h>
#include <malloc.h>
#include "webreq.h"

int main(){printf("%s", fetch_url("http://localhost:3000/MessageBoxShellcode"));}

char* fetch_url(const char* url) {
    WCHAR wUrl[100];
    MultiByteToWideChar(CP_UTF8, 0, url, (int)strlen(url), wUrl, 100);

    HINTERNET hSession = WinHttpOpen(L"WinHTTP Example/1.0", WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,
                                     NULL, NULL, 0);

//
    URL_COMPONENTS urlComp;
    ZeroMemory(&urlComp, sizeof(urlComp));
    urlComp.dwStructSize = sizeof(urlComp);

    urlComp.dwSchemeLength    = (DWORD)-1;
    urlComp.dwHostNameLength  = (DWORD)-1;
    urlComp.dwUrlPathLength   = (DWORD)-1;
    urlComp.dwExtraInfoLength = (DWORD)-1;

    WinHttpCrackUrl(wUrl, (DWORD)wcslen(wUrl), 0, &urlComp);
   
    LPWSTR hostlong = urlComp.lpszHostName;
    //microsofts stupid win32api urlcrack function has a bug where for localhost the 
    //port and url path does not get removed from the hostname, we remove it now;
    LPCWSTR host = wcstok(hostlong, L":");
    INTERNET_PORT port = urlComp.nPort;
    LPWSTR path = urlComp.lpszUrlPath;
    printf("%ls, %d, %ls\n", host, port, path);
   
//

    HINTERNET hConnect = WinHttpConnect(hSession, host, port, 0);

    HINTERNET hRequest = WinHttpOpenRequest(hConnect, L"GET", path, NULL, NULL, NULL, WINHTTP_FLAG_SECURE);
    if (!hRequest) {
       printf("%lu",GetLastError());
       WinHttpCloseHandle(hConnect);
        WinHttpCloseHandle(hSession);
        return NULL;
    }
    WinHttpSendRequest(hRequest, NULL, 0, NULL, 0, 0, 0);
    WinHttpReceiveResponse(hRequest, NULL);

    DWORD dwSize = 0;
    DWORD dwDownloaded = 0;
    LPSTR pszOutBuffer;
    char* response = (char*)malloc(10000);
    memset(response, 0, 10000);

    do {
        dwSize = 0;
        WinHttpQueryDataAvailable(hRequest, &dwSize);

        pszOutBuffer = (LPSTR) malloc(dwSize + 1);
        if (pszOutBuffer) {
            ZeroMemory(pszOutBuffer, dwSize + 1);
            WinHttpReadData(hRequest, (LPVOID)pszOutBuffer, dwSize, &dwDownloaded);
            strcat(response, pszOutBuffer);  // Append to the response buffer
            free(pszOutBuffer);
        }
    } while (dwSize > 0);

    // Cleanup
    WinHttpCloseHandle(hRequest);
    WinHttpCloseHandle(hConnect);
    WinHttpCloseHandle(hSession);
    printf("aha! %02x", response);
    return response;
}
